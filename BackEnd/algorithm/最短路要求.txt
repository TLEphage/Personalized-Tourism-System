我在map_service.py中要实现3种最短路查询

1. 一到一最短路查询：
参数：起点编号、终点编号
流程：
根据map.json内容生成邻接表；
预处理启发式函数的值，根据map.json的内容计算每个点到终点的预测代价；
调用A*算法查询起点到终点的最短路径；
返回最短路径和最短路距离。

2. 一到一最短时间查询
参数：起点编号、终点编号、交通方式（步行、骑车、电动车、步行+骑车混合、步行+电动车混合 共5种）
流程：
随机生成每条边的“拥挤度”（0.5~1.0）；
根据map.json的内容计算每条边的时间并生成邻接表，一条边的时间定义为 两点的距离/(“拥挤度” * 对应交通方式的速度)，注意速度=0说明这条路不能使用这种交通方式；
预处理启发式函数的值，根据map.json的内容计算每个点到终点的预测代价；
调用A*算法查询起点到终点的最短时间路径；
根据最短路径计算实际的移动距离；
返回最短时间路径、最短时间、最短时间路径对应的移动距离。
注意每条边需要标注是使用了哪种交通方式

3. 一到多最短路径查询
要求：从起点出发，按最短路径依次经过所有终点，最后回到起点
参数：起点编号、终点编号集合
流程：
根据map.json内容生成邻接表；
从起点开始，每次调用dijkstra算法找到最近的终点，将终点从终点集合中删去，直到集合为空；
以最后一个终点为起点，以最初的起点为终点，调用dijkstra算法；
返回整个过程的路径、整个路径的长度

map.json的部分内容如下，注意边是双向边
{
    "nodes": [
        {
            "id": 0,
            "name": "1",
            "type": "1",
            "popularity": 1,
            "longitude": 116.357063,
            "latitude": 39.964883
        },
        {
            "id": 1,
            "name": "2",
            "type": "2",
            "popularity": 2,
            "longitude": 116.357088,
            "latitude": 39.964512
        },
        {
            "id": 2,
            "name": "3",
            "type": "3",
            "popularity": 100,
            "longitude": 116.35712,
            "latitude": 39.96422
        }
    ],
    "edges": [
        {
            "id": 0,
            "start_node": 5,
            "end_node": 6,
            "distance": 180.99,
            "walk_speed": 1.0,
            "bike_speed": 3.0,
            "ebike_speed": 5.0
        },
        {
            "id": 1,
            "start_node": 5,
            "end_node": 7,
            "distance": 28.42,
            "walk_speed": 1.0,
            "bike_speed": 0.0,
            "ebike_speed": 0.0
        },
        {
            "id": 2,
            "start_node": 7,
            "end_node": 8,
            "distance": 23.79,
            "walk_speed": 1.0,
            "bike_speed": 0.0,
            "ebike_speed": 0.0
        }
    ]
}
在algorithm.py中实现dijkstra和A*算法
函数参数包括起点编号，终点集合（如果算法找到其中一个终点的最短路则直接返回）、图的信息（以邻接表储存，每条边包括下一个节点编号和边的长度）
返回值包括路径上的节点编号、最短路长度

其他要求：不要使用class，不需要距离计算结果缓存；功能实现放在map_service.py，算法实现放在algorithm.py；map_service.py中返回的路径的节点必须包含map.json中节点的所有信息